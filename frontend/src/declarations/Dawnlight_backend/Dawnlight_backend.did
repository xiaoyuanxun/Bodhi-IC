type TokenMetaData = 
 record {
   assetId: nat;
   canisterId: principal;
   creator: principal;
 };
type Time = int;
type Result_1 = 
 variant {
   err: Error;
   ok: principal;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type Error = 
 variant {
   AssetAlreadyCreated;
   AssetNotExist;
   AssetNotExistInBucket;
   BurnError;
   InsufficientBalance;
   InsufficientPayment;
   MintError;
   SupplyNotAllowedBelowPremintAmount;
   TokenOfAssetNotExist;
   TransferCreatorFeeError;
   TransferToMainAccountError;
   TransferToSellAccountError;
   Unauthorized;
   UnknowError;
 };
type Dawnlight = 
 service {
   buy: (nat, nat) -> (Result);
   create: (text) -> (Result_1);
   getAsset: (nat) -> (opt Asset) query;
   getAssetIdToTokenEntries: () -> (vec record {
                                          nat;
                                          TokenMetaData;
                                        }) query;
   getAssetIdsByPrincipal: (principal) -> (opt vec nat) query;
   getAssetsEntries: () -> (vec record {
                                  nat;
                                  Asset;
                                }) query;
   getBuyPrice: (nat, nat) -> (nat) query;
   getBuyPriceAfterFee: (nat, nat) -> (nat) query;
   getFileKeyToAssetIdEntries: () -> (vec record {
                                            text;
                                            nat;
                                          }) query;
   getPoolEntries: () -> (vec record {
                                nat;
                                nat;
                              }) query;
   getPrice: (nat, nat) -> (nat) query;
   getSellPrice: (nat, nat) -> (nat) query;
   getSellPriceAfterFee: (nat, nat) -> (nat) query;
   getTokenCanisterByAssetId: (nat) -> (opt principal) query;
   getTotalSupplyEntries: () -> (vec record {
                                       nat;
                                       nat;
                                     }) query;
   getUserAssetsEntries: () -> (vec record {
                                      principal;
                                      vec nat;
                                    }) query;
   getUserBuyed: (principal) -> (vec record {
                                       Asset;
                                       nat;
                                     }) query;
   getUserBuyedAssetsEntries: () ->
    (vec record {
           principal;
           vec record {
                 Asset;
                 nat;
               };
         }) query;
   getUserCreated: (principal) -> (vec Asset) query;
   getWicp: (principal) -> (Result);
   remove: (nat) -> (Result);
   sell: (nat, nat) -> (Result);
   uri: (nat) -> (text) query;
 };
type Asset = 
 record {
   creator: principal;
   fileKey: text;
   fileType: text;
   id: nat;
   time: Time;
   tokenCanister: principal;
 };
service : (principal, principal) -> Dawnlight
